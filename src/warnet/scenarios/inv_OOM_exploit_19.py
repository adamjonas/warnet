#!/usr/bin/env python3
from collections import defaultdict
from time import sleep

from test_framework.messages import msg_inv, CInv, MSG_BLOCK
from test_framework.p2p import P2PInterface
from warnet.test_framework_bridge import WarnetTestFramework
from test_framework.util import assert_equal, wait_until

def cli_help():
    return "Run Large INV message test on Bitcoin Core 0.19.x nodes"

class LargeInvNode(P2PInterface):
    def __init__(self):
        super().__init__()
        self.message_count = defaultdict(int)

    def on_getheaders(self, message):
        self.message_count['getheaders'] += 1

class LargeInvScenario(WarnetTestFramework):
    def set_test_params(self):
        self.num_nodes = 0

    def run_test(self):
        while not self.warnet.network_connected():
            self.log.info("Waiting for complete network connection...")
            sleep(5)
        self.log.info("Network connected")

        # Find all nodes running version 0.19.x
        target_nodes = []
        for node in self.nodes:
            network_info = node.getpeerinfo()
            version = network_info['version']
            if 190000 <= version < 200000:  # 0.19.0 to 0.19.99
                target_nodes.append(node)
                self.log.info(f"Found node running version 0.19.x: {version}")

        if not target_nodes:
            self.log.warning("No nodes running version 0.19.x found")
            return

        # Test each 0.19.x node
        for i, node in enumerate(target_nodes):
            self.log.info(f"Testing node {i} running version 0.19.x")
            p2p_conn = node.add_p2p_connection(LargeInvNode(), dstaddr=self.warnet.tanks[i].ipv4, dstport=18444)
            self.send_large_inv(node, p2p_conn)

    def send_large_inv(self, node, p2p):
        # Create a large INV message with 50,000 block items
        inv_vect = [CInv(MSG_BLOCK, i) for i in range(50000)]
        large_inv = msg_inv(inv_vect)

        p2p.send_message(large_inv)

        sleep(2)


if __name__ == "__main__":
    LargeInvScenario().main()
